{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Native project\\\\photofeed complete\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\StackView\\\\StackView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from \"./StackViewLayout\";\nimport Transitioner from \"../Transitioner\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nvar NativeAnimatedModule = NativeModules && NativeModules.NativeAnimatedModule;\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  var _super = _createSuper(StackView);\n\n  function StackView() {\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._configureTransition = function (transitionProps, prevTransitionProps) {\n      return _objectSpread(_objectSpread({}, TransitionConfigs.getTransitionConfig(_this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, _this.props.navigationConfig.mode === 'modal').transitionSpec), {}, {\n        useNativeDriver: !!NativeAnimatedModule\n      });\n    };\n\n    _this._render = function (transitionProps, lastTransitionProps) {\n      var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          navigationConfig = _this$props.navigationConfig;\n      return React.createElement(StackViewLayout, _extends({}, navigationConfig, {\n        onGestureBegin: _this.props.onGestureBegin,\n        onGestureCanceled: _this.props.onGestureCanceled,\n        onGestureEnd: _this.props.onGestureEnd,\n        screenProps: screenProps,\n        descriptors: _this.props.descriptors,\n        transitionProps: transitionProps,\n        lastTransitionProps: lastTransitionProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 12\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Transitioner, {\n        render: this._render,\n        configureTransition: this._configureTransition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,\n        onTransitionEnd: function onTransitionEnd(transition, lastTransition) {\n          var _this2$props = _this2.props,\n              navigationConfig = _this2$props.navigationConfig,\n              navigation = _this2$props.navigation;\n          var onTransitionEnd = _this2.props.onTransitionEnd || navigationConfig.onTransitionEnd;\n\n          if (transition.navigation.state.isTransitioning) {\n            navigation.dispatch(StackActions.completeTransition({\n              key: navigation.state.key\n            }));\n          }\n\n          onTransitionEnd && onTransitionEnd(transition, lastTransition);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nStackView.defaultProps = {\n  navigationConfig: {\n    mode: 'card'\n  }\n};\nexport default StackView;","map":{"version":3,"sources":["D:/Native project/photofeed complete/node_modules/react-navigation-stack/dist/views/StackView/StackView.js"],"names":["React","StackActions","StackViewLayout","Transitioner","TransitionConfigs","NativeAnimatedModule","NativeModules","StackView","_configureTransition","transitionProps","prevTransitionProps","getTransitionConfig","props","navigationConfig","transitionConfig","mode","transitionSpec","useNativeDriver","_render","lastTransitionProps","screenProps","onGestureBegin","onGestureCanceled","onGestureEnd","descriptors","navigation","onTransitionStart","transition","lastTransition","onTransitionEnd","state","isTransitioning","dispatch","completeTransition","key","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,eAAP;AACA,OAAOC,YAAP;AACA,OAAOC,iBAAP;AAEA,IAAMC,oBAAoB,GAAGC,aAAa,IAAIA,aAAa,CAACD,oBAA5D;;IAEME,S;;;;;;;;;;;;;;;;UAoBJC,oB,GAAuB,UAACC,eAAD,EAAkBC,mBAAlB,EAA0C;AAC/D,6CACKN,iBAAiB,CAACO,mBAAlB,CAAsC,MAAKC,KAAL,CAAWC,gBAAX,CAA4BC,gBAAlE,EAAoFL,eAApF,EAAqGC,mBAArG,EAA0H,MAAKE,KAAL,CAAWC,gBAAX,CAA4BE,IAA5B,KAAqC,OAA/J,EAAwKC,cAD7K;AAEEC,QAAAA,eAAe,EAAE,CAAC,CAACZ;AAFrB;AAID,K;;UAEDa,O,GAAU,UAACT,eAAD,EAAkBU,mBAAlB,EAA0C;AAAA,wBACR,MAAKP,KADG;AAAA,UAC1CQ,WAD0C,eAC1CA,WAD0C;AAAA,UAC7BP,gBAD6B,eAC7BA,gBAD6B;AAElD,aAAO,oBAAC,eAAD,eAAqBA,gBAArB;AAAuC,QAAA,cAAc,EAAE,MAAKD,KAAL,CAAWS,cAAlE;AAAkF,QAAA,iBAAiB,EAAE,MAAKT,KAAL,CAAWU,iBAAhH;AAAmI,QAAA,YAAY,EAAE,MAAKV,KAAL,CAAWW,YAA5J;AAA0K,QAAA,WAAW,EAAEH,WAAvL;AAAoM,QAAA,WAAW,EAAE,MAAKR,KAAL,CAAWY,WAA5N;AAAyO,QAAA,eAAe,EAAEf,eAA1P;AAA2Q,QAAA,mBAAmB,EAAEU,mBAAhS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,K;;;;;;;6BAvBQ;AAAA;;AACP,aAAO,oBAAC,YAAD;AAAc,QAAA,MAAM,EAAE,KAAKD,OAA3B;AAAoC,QAAA,mBAAmB,EAAE,KAAKV,oBAA9D;AAAoF,QAAA,WAAW,EAAE,KAAKI,KAAL,CAAWQ,WAA5G;AAAyH,QAAA,UAAU,EAAE,KAAKR,KAAL,CAAWa,UAAhJ;AAA4J,QAAA,WAAW,EAAE,KAAKb,KAAL,CAAWY,WAApL;AAAiM,QAAA,iBAAiB,EAAE,KAAKZ,KAAL,CAAWc,iBAAX,IAAgC,KAAKd,KAAL,CAAWC,gBAAX,CAA4Ba,iBAAhR;AAAmS,QAAA,eAAe,EAAE,yBAACC,UAAD,EAAaC,cAAb,EAAgC;AAAA,6BAChT,MAAI,CAAChB,KAD2S;AAAA,cACjVC,gBADiV,gBACjVA,gBADiV;AAAA,cAC/TY,UAD+T,gBAC/TA,UAD+T;AAEzV,cAAMI,eAAe,GAAG,MAAI,CAACjB,KAAL,CAAWiB,eAAX,IAA8BhB,gBAAgB,CAACgB,eAAvE;;AACA,cAAIF,UAAU,CAACF,UAAX,CAAsBK,KAAtB,CAA4BC,eAAhC,EAAiD;AAC/CN,YAAAA,UAAU,CAACO,QAAX,CAAoB/B,YAAY,CAACgC,kBAAb,CAAgC;AAClDC,cAAAA,GAAG,EAAET,UAAU,CAACK,KAAX,CAAiBI;AAD4B,aAAhC,CAApB;AAGD;;AACDL,UAAAA,eAAe,IAAIA,eAAe,CAACF,UAAD,EAAaC,cAAb,CAAlC;AACD,SATM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAUD;;;;EAlBqB5B,KAAK,CAACmC,S;;AAAxB5B,S,CACG6B,Y,GAAe;AACpBvB,EAAAA,gBAAgB,EAAE;AAChBE,IAAAA,IAAI,EAAE;AADU;AADE,C;AAgCxB,eAAeR,SAAf","sourcesContent":["import React from 'react';\nimport { NativeModules } from 'react-native';\n\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\n\nconst NativeAnimatedModule = NativeModules && NativeModules.NativeAnimatedModule;\n\nclass StackView extends React.Component {\n  static defaultProps = {\n    navigationConfig: {\n      mode: 'card'\n    }\n  };\n\n  render() {\n    return <Transitioner render={this._render} configureTransition={this._configureTransition} screenProps={this.props.screenProps} navigation={this.props.navigation} descriptors={this.props.descriptors} onTransitionStart={this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart} onTransitionEnd={(transition, lastTransition) => {\n      const { navigationConfig, navigation } = this.props;\n      const onTransitionEnd = this.props.onTransitionEnd || navigationConfig.onTransitionEnd;\n      if (transition.navigation.state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key\n        }));\n      }\n      onTransitionEnd && onTransitionEnd(transition, lastTransition);\n    }} />;\n  }\n\n  _configureTransition = (transitionProps, prevTransitionProps) => {\n    return {\n      ...TransitionConfigs.getTransitionConfig(this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, this.props.navigationConfig.mode === 'modal').transitionSpec,\n      useNativeDriver: !!NativeAnimatedModule\n    };\n  };\n\n  _render = (transitionProps, lastTransitionProps) => {\n    const { screenProps, navigationConfig } = this.props;\n    return <StackViewLayout {...navigationConfig} onGestureBegin={this.props.onGestureBegin} onGestureCanceled={this.props.onGestureCanceled} onGestureEnd={this.props.onGestureEnd} screenProps={screenProps} descriptors={this.props.descriptors} transitionProps={transitionProps} lastTransitionProps={lastTransitionProps} />;\n  };\n}\n\nexport default StackView;"]},"metadata":{},"sourceType":"module"}