{"ast":null,"code":"import invariant from\"../utils/invariant\";export default function getScreenForRouteName(routeConfigs,routeName){var routeConfig=routeConfigs[routeName];if(!routeConfig){throw new Error(\"There is no route defined for key \"+routeName+\".\\n\"+(\"Must be one of: \"+Object.keys(routeConfigs).map(function(a){return\"'\"+a+\"'\";}).join(',')));}if(routeConfig.screen){return routeConfig.screen;}if(typeof routeConfig.getScreen==='function'){var screen=routeConfig.getScreen();invariant(typeof screen==='function',\"The getScreen defined for route '\"+routeName+\" didn't return a valid \"+'screen or navigator.\\n\\n'+'Please pass it like this:\\n'+(routeName+\": {\\n  getScreen: () => require('./MyScreen').default\\n}\"));return screen;}return routeConfig;}","map":{"version":3,"sources":["E:/photofeed/node_modules/react-navigation/src/routers/getScreenForRouteName.js"],"names":["invariant","getScreenForRouteName","routeConfigs","routeName","routeConfig","Error","Object","keys","map","a","join","screen","getScreen"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,0BAMA,cAAe,SAASC,CAAAA,qBAAT,CAA+BC,YAA/B,CAA6CC,SAA7C,CAAwD,CACrE,GAAMC,CAAAA,WAAW,CAAGF,YAAY,CAACC,SAAD,CAAhC,CAEA,GAAI,CAACC,WAAL,CAAkB,CAChB,KAAM,IAAIC,CAAAA,KAAJ,CACJ,qCAAqCF,SAArC,2BACqBG,MAAM,CAACC,IAAP,CAAYL,YAAZ,EAChBM,GADgB,CACZ,SAAAC,CAAC,YAAQA,CAAR,MADW,EAEhBC,IAFgB,CAEX,GAFW,CADrB,CADI,CAAN,CAMD,CAED,GAAIN,WAAW,CAACO,MAAhB,CAAwB,CACtB,MAAOP,CAAAA,WAAW,CAACO,MAAnB,CACD,CAED,GAAI,MAAOP,CAAAA,WAAW,CAACQ,SAAnB,GAAiC,UAArC,CAAiD,CAC/C,GAAMD,CAAAA,MAAM,CAAGP,WAAW,CAACQ,SAAZ,EAAf,CACAZ,SAAS,CACP,MAAOW,CAAAA,MAAP,GAAkB,UADX,CAEP,oCAAoCR,SAApC,2BACE,0BADF,CAEE,6BAFF,EAGKA,SAHL,4DAFO,CAAT,CAOA,MAAOQ,CAAAA,MAAP,CACD,CAED,MAAOP,CAAAA,WAAP,CACD","sourcesContent":["import invariant from '../utils/invariant';\n\n/**\n * Simple helper that gets a single screen (React component or navigator)\n * out of the navigator config.\n */\nexport default function getScreenForRouteName(routeConfigs, routeName) {\n  const routeConfig = routeConfigs[routeName];\n\n  if (!routeConfig) {\n    throw new Error(\n      `There is no route defined for key ${routeName}.\\n` +\n        `Must be one of: ${Object.keys(routeConfigs)\n          .map(a => `'${a}'`)\n          .join(',')}`\n    );\n  }\n\n  if (routeConfig.screen) {\n    return routeConfig.screen;\n  }\n\n  if (typeof routeConfig.getScreen === 'function') {\n    const screen = routeConfig.getScreen();\n    invariant(\n      typeof screen === 'function',\n      `The getScreen defined for route '${routeName} didn't return a valid ` +\n        'screen or navigator.\\n\\n' +\n        'Please pass it like this:\\n' +\n        `${routeName}: {\\n  getScreen: () => require('./MyScreen').default\\n}`\n    );\n    return screen;\n  }\n\n  return routeConfig;\n}\n"]},"metadata":{},"sourceType":"module"}