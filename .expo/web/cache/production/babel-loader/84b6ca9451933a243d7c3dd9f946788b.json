{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import React from'react';import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{SafeAreaView}from'react-navigation';import TouchableItem from\"./TouchableItem\";var DrawerNavigatorItems=function DrawerNavigatorItems(_ref){var items=_ref.items,activeItemKey=_ref.activeItemKey,activeTintColor=_ref.activeTintColor,activeBackgroundColor=_ref.activeBackgroundColor,inactiveTintColor=_ref.inactiveTintColor,inactiveBackgroundColor=_ref.inactiveBackgroundColor,getLabel=_ref.getLabel,renderIcon=_ref.renderIcon,onItemPress=_ref.onItemPress,itemsContainerStyle=_ref.itemsContainerStyle,itemStyle=_ref.itemStyle,labelStyle=_ref.labelStyle,activeLabelStyle=_ref.activeLabelStyle,inactiveLabelStyle=_ref.inactiveLabelStyle,iconContainerStyle=_ref.iconContainerStyle,drawerPosition=_ref.drawerPosition;return React.createElement(View,{style:[styles.container,itemsContainerStyle]},items.map(function(route,index){var _ref2;var focused=activeItemKey===route.key;var color=focused?activeTintColor:inactiveTintColor;var backgroundColor=focused?activeBackgroundColor:inactiveBackgroundColor;var scene={route:route,index:index,focused:focused,tintColor:color};var icon=renderIcon(scene);var label=getLabel(scene);var extraLabelStyle=focused?activeLabelStyle:inactiveLabelStyle;return React.createElement(TouchableItem,{key:route.key,onPress:function onPress(){onItemPress({route:route,focused:focused});},delayPressIn:0},React.createElement(SafeAreaView,{style:{backgroundColor:backgroundColor},forceInset:(_ref2={},_defineProperty(_ref2,drawerPosition,'always'),_defineProperty(_ref2,drawerPosition==='left'?'right':'left','never'),_defineProperty(_ref2,\"vertical\",'never'),_ref2)},React.createElement(View,{style:[styles.item,itemStyle]},icon?React.createElement(View,{style:[styles.icon,focused?null:styles.inactiveIcon,iconContainerStyle]},icon):null,typeof label==='string'?React.createElement(Text,{style:[styles.label,{color:color},labelStyle,extraLabelStyle]},label):label)));}));};DrawerNavigatorItems.defaultProps={activeTintColor:'#2196f3',activeBackgroundColor:'rgba(0, 0, 0, .04)',inactiveTintColor:'rgba(0, 0, 0, .87)',inactiveBackgroundColor:'transparent'};var styles=StyleSheet.create({container:{paddingVertical:4},item:{flexDirection:'row',alignItems:'center'},icon:{marginHorizontal:16,width:24,alignItems:'center'},inactiveIcon:{opacity:0.62},label:{margin:16,fontWeight:'bold'}});export default DrawerNavigatorItems;","map":{"version":3,"sources":["E:/photofeed/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js"],"names":["React","SafeAreaView","TouchableItem","DrawerNavigatorItems","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","extraLabelStyle","item","inactiveIcon","defaultProps","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  activeLabelStyle,\n  inactiveLabelStyle,\n  iconContainerStyle,\n  drawerPosition\n}) => <View style={[styles.container, itemsContainerStyle]}>\n    {items.map((route, index) => {\n    const focused = activeItemKey === route.key;\n    const color = focused ? activeTintColor : inactiveTintColor;\n    const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    const scene = { route, index, focused, tintColor: color };\n    const icon = renderIcon(scene);\n    const label = getLabel(scene);\n    const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return <TouchableItem key={route.key} onPress={() => {\n      onItemPress({ route, focused });\n    }} delayPressIn={0}>\n          <SafeAreaView style={{ backgroundColor }} forceInset={{\n        [drawerPosition]: 'always',\n        [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n        vertical: 'never'\n      }}>\n            <View style={[styles.item, itemStyle]}>\n              {icon ? <View style={[styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]}>\n                  {icon}\n                </View> : null}\n              {typeof label === 'string' ? <Text style={[styles.label, { color }, labelStyle, extraLabelStyle]}>\n                  {label}\n                </Text> : label}\n            </View>\n          </SafeAreaView>\n        </TouchableItem>;\n  })}\n  </View>;\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\n\nexport default DrawerNavigatorItems;"]},"metadata":{},"sourceType":"module"}