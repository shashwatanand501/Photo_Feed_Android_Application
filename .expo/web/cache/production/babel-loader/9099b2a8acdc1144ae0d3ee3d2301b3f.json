{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}export default function getChildEventSubscriber(addListener,key){var actionSubscribers=new Set();var willFocusSubscribers=new Set();var didFocusSubscribers=new Set();var willBlurSubscribers=new Set();var didBlurSubscribers=new Set();var removeAll=function removeAll(){[actionSubscribers,willFocusSubscribers,didFocusSubscribers,willBlurSubscribers,didBlurSubscribers].forEach(function(set){return set.clear();});upstreamSubscribers.forEach(function(subs){return subs&&subs.remove();});};var getChildSubscribers=function getChildSubscribers(evtName){switch(evtName){case'action':return actionSubscribers;case'willFocus':return willFocusSubscribers;case'didFocus':return didFocusSubscribers;case'willBlur':return willBlurSubscribers;case'didBlur':return didBlurSubscribers;default:return null;}};var emit=function emit(type,payload){var payloadWithType=_objectSpread(_objectSpread({},payload),{},{type:type});var subscribers=getChildSubscribers(type);subscribers&&subscribers.forEach(function(subs){subs(payloadWithType);});};var lastEmittedEvent='didBlur';var upstreamEvents=['willFocus','didFocus','willBlur','didBlur','action'];var upstreamSubscribers=upstreamEvents.map(function(eventName){return addListener(eventName,function(payload){var state=payload.state,lastState=payload.lastState,action=payload.action;var lastRoutes=lastState&&lastState.routes;var routes=state&&state.routes;var lastFocusKey=lastState&&lastState.routes&&lastState.routes[lastState.index].key;var focusKey=routes&&routes[state.index].key;var isChildFocused=focusKey===key;var lastRoute=lastRoutes&&lastRoutes.find(function(route){return route.key===key;});var newRoute=routes&&routes.find(function(route){return route.key===key;});var childPayload={context:key+\":\"+action.type+\"_\"+(payload.context||'Root'),state:newRoute,lastState:lastRoute,action:action,type:eventName};var isTransitioning=!!state&&state.isTransitioning;var previouslyLastEmittedEvent=lastEmittedEvent;if(lastEmittedEvent==='didBlur'){if(eventName==='willFocus'&&isChildFocused){emit(lastEmittedEvent='willFocus',childPayload);}else if(eventName==='action'&&isChildFocused){emit(lastEmittedEvent='willFocus',childPayload);}}if(lastEmittedEvent==='willFocus'){if(eventName==='didFocus'&&isChildFocused&&!isTransitioning){emit(lastEmittedEvent='didFocus',childPayload);}else if(eventName==='action'&&isChildFocused&&!isTransitioning){emit(lastEmittedEvent='didFocus',childPayload);}}if(lastEmittedEvent==='didFocus'){if(!isChildFocused){emit(lastEmittedEvent='willBlur',childPayload);}else if(eventName==='willBlur'){emit(lastEmittedEvent='willBlur',childPayload);}else if(eventName==='action'&&previouslyLastEmittedEvent==='didFocus'){emit('action',childPayload);}}if(lastEmittedEvent==='willBlur'){if(eventName==='action'&&!isChildFocused&&!isTransitioning){emit(lastEmittedEvent='didBlur',childPayload);}else if(eventName==='didBlur'){emit(lastEmittedEvent='didBlur',childPayload);}}if(lastEmittedEvent==='didBlur'&&!newRoute){removeAll();}});});return{addListener:function addListener(eventName,eventHandler){var subscribers=getChildSubscribers(eventName);if(!subscribers){throw new Error(\"Invalid event name \\\"\"+eventName+\"\\\"\");}subscribers.add(eventHandler);var remove=function remove(){subscribers.delete(eventHandler);};return{remove:remove};}};}","map":{"version":3,"sources":["E:/photofeed/node_modules/react-navigation/src/getChildEventSubscriber.js"],"names":["getChildEventSubscriber","addListener","key","actionSubscribers","Set","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","removeAll","forEach","set","clear","upstreamSubscribers","subs","remove","getChildSubscribers","evtName","emit","type","payload","payloadWithType","subscribers","lastEmittedEvent","upstreamEvents","map","eventName","state","lastState","action","lastRoutes","routes","lastFocusKey","index","focusKey","isChildFocused","lastRoute","find","route","newRoute","childPayload","context","isTransitioning","previouslyLastEmittedEvent","eventHandler","Error","add","delete"],"mappings":"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","sourcesContent":["/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\nexport default function getChildEventSubscriber(addListener, key) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n\n  const removeAll = () => {\n    [\n      actionSubscribers,\n      willFocusSubscribers,\n      didFocusSubscribers,\n      willBlurSubscribers,\n      didBlurSubscribers,\n    ].forEach(set => set.clear());\n\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload, type };\n    const subscribers = getChildSubscribers(type);\n    subscribers &&\n      subscribers.forEach(subs => {\n        subs(payloadWithType);\n      });\n  };\n\n  // lastEmittedEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  let lastEmittedEvent = 'didBlur';\n\n  const upstreamEvents = [\n    'willFocus',\n    'didFocus',\n    'willBlur',\n    'didBlur',\n    'action',\n  ];\n\n  const upstreamSubscribers = upstreamEvents.map(eventName =>\n    addListener(eventName, payload => {\n      const { state, lastState, action } = payload;\n      const lastRoutes = lastState && lastState.routes;\n      const routes = state && state.routes;\n\n      const lastFocusKey =\n        lastState && lastState.routes && lastState.routes[lastState.index].key;\n      const focusKey = routes && routes[state.index].key;\n\n      const isChildFocused = focusKey === key;\n      const lastRoute =\n        lastRoutes && lastRoutes.find(route => route.key === key);\n      const newRoute = routes && routes.find(route => route.key === key);\n      const childPayload = {\n        context: `${key}:${action.type}_${payload.context || 'Root'}`,\n        state: newRoute,\n        lastState: lastRoute,\n        action,\n        type: eventName,\n      };\n      const isTransitioning = !!state && state.isTransitioning;\n\n      const previouslyLastEmittedEvent = lastEmittedEvent;\n\n      if (lastEmittedEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit((lastEmittedEvent = 'willFocus'), childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit((lastEmittedEvent = 'willFocus'), childPayload);\n        }\n      }\n      if (lastEmittedEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit((lastEmittedEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastEmittedEvent = 'didFocus'), childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          emit((lastEmittedEvent = 'willBlur'), childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          emit((lastEmittedEvent = 'willBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          previouslyLastEmittedEvent === 'didFocus'\n        ) {\n          // While focused, pass action events to children for grandchildren focus\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          emit((lastEmittedEvent = 'didBlur'), childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          emit((lastEmittedEvent = 'didBlur'), childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    })\n  );\n\n  return {\n    addListener(eventName, eventHandler) {\n      const subscribers = getChildSubscribers(eventName);\n      if (!subscribers) {\n        throw new Error(`Invalid event name \"${eventName}\"`);\n      }\n      subscribers.add(eventHandler);\n      const remove = () => {\n        subscribers.delete(eventHandler);\n      };\n      return { remove };\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}