{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}it=o[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();return it.next.bind(it);}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import NavigationActions from\"../NavigationActions\";import StackActions from\"./StackActions\";import createConfigGetter from\"./createConfigGetter\";import getScreenForRouteName from\"./getScreenForRouteName\";import StateUtils from\"../StateUtils\";import validateRouteConfigMap from\"./validateRouteConfigMap\";import invariant from\"../utils/invariant\";import{generateKey}from\"./KeyGenerator\";import{createPathParser}from\"./pathUtils\";function behavesLikePushAction(action){return action.type===NavigationActions.NAVIGATE||action.type===StackActions.PUSH;}var defaultActionCreators=function defaultActionCreators(route,navStateKey){return{};};function isResetToRootStack(action){return action.type===StackActions.RESET&&action.key===null;}export default(function(routeConfigs){var stackConfig=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};validateRouteConfigMap(routeConfigs);var childRouters={};var routeNames=Object.keys(routeConfigs);routeNames.forEach(function(routeName){var screen=getScreenForRouteName(routeConfigs,routeName);if(screen&&screen.router){childRouters[routeName]=screen.router;}else{childRouters[routeName]=null;}});var initialRouteParams=stackConfig.initialRouteParams;var getCustomActionCreators=stackConfig.getCustomActionCreators||defaultActionCreators;var initialRouteName=stackConfig.initialRouteName||routeNames[0];var initialChildRouter=childRouters[initialRouteName];function getInitialState(action){var route={};var childRouter=childRouters[action.routeName];if(behavesLikePushAction(action)&&childRouter!==undefined){var childState={};if(childRouter!==null){var childAction=action.action||NavigationActions.init({params:action.params});childState=childRouter.getStateForAction(childAction);}return{key:'StackRouterRoot',isTransitioning:false,index:0,routes:[_objectSpread(_objectSpread({params:action.params},childState),{},{key:action.key||generateKey(),routeName:action.routeName})]};}if(initialChildRouter){route=initialChildRouter.getStateForAction(NavigationActions.navigate({routeName:initialRouteName,params:initialRouteParams}));}var params=(route.params||action.params||initialRouteParams)&&_objectSpread(_objectSpread(_objectSpread({},route.params||{}),action.params||{}),initialRouteParams||{});var initialRouteKey=stackConfig.initialRouteKey;route=_objectSpread(_objectSpread(_objectSpread({},route),params?{params:params}:{}),{},{routeName:initialRouteName,key:action.key||initialRouteKey||generateKey()});return{key:'StackRouterRoot',isTransitioning:false,index:0,routes:[route]};}var _createPathParser=createPathParser(childRouters,routeConfigs,stackConfig.paths),getPathAndParamsForRoute=_createPathParser.getPathAndParamsForRoute,_getActionForPathAndParams=_createPathParser.getActionForPathAndParams;return{childRouters:childRouters,getComponentForState:function getComponentForState(state){var activeChildRoute=state.routes[state.index];var routeName=activeChildRoute.routeName;if(childRouters[routeName]){return childRouters[routeName].getComponentForState(activeChildRoute);}return getScreenForRouteName(routeConfigs,routeName);},getComponentForRouteName:function getComponentForRouteName(routeName){return getScreenForRouteName(routeConfigs,routeName);},getActionCreators:function getActionCreators(route,navStateKey){return _objectSpread(_objectSpread({},getCustomActionCreators(route,navStateKey)),{},{pop:function pop(n,params){return StackActions.pop(_objectSpread({n:n},params));},popToTop:function popToTop(params){return StackActions.popToTop(params);},push:function push(routeName,params,action){return StackActions.push({routeName:routeName,params:params,action:action});},replace:function replace(replaceWith,params,action,newKey){if(typeof replaceWith==='string'){return StackActions.replace({routeName:replaceWith,params:params,action:action,key:route.key,newKey:newKey});}invariant(typeof replaceWith==='object','Must replaceWith an object or a string');invariant(params==null,'Params must not be provided to .replace() when specifying an object');invariant(action==null,'Child action must not be provided to .replace() when specifying an object');invariant(newKey==null,'Child action must not be provided to .replace() when specifying an object');return StackActions.replace(replaceWith);},reset:function reset(actions,index){return StackActions.reset({actions:actions,index:index==null?actions.length-1:index,key:navStateKey});},dismiss:function dismiss(){return NavigationActions.back({key:navStateKey});}});},getStateForAction:function getStateForAction(action,state){if(!state){return getInitialState(action);}var activeChildRoute=state.routes[state.index];if(!isResetToRootStack(action)&&action.type!==NavigationActions.NAVIGATE){var activeChildRouter=childRouters[activeChildRoute.routeName];if(activeChildRouter){var route=activeChildRouter.getStateForAction(action,activeChildRoute);if(route!==null&&route!==activeChildRoute){return StateUtils.replaceAt(state,activeChildRoute.key,route,action.type===NavigationActions.SET_PARAMS);}}}else if(action.type===NavigationActions.NAVIGATE){for(var _iterator=_createForOfIteratorHelperLoose(state.routes.slice().reverse()),_step;!(_step=_iterator()).done;){var childRoute=_step.value;var childRouter=childRouters[childRoute.routeName];var childAction=action.routeName===childRoute.routeName&&action.action?action.action:action;if(childRouter){var nextRouteState=childRouter.getStateForAction(childAction,childRoute);if(nextRouteState===null||nextRouteState!==childRoute){var newState=StateUtils.replaceAndPrune(state,nextRouteState?nextRouteState.key:childRoute.key,nextRouteState?nextRouteState:childRoute);return _objectSpread(_objectSpread({},newState),{},{isTransitioning:state.index!==newState.index?action.immediate!==true:state.isTransitioning});}}}}if(behavesLikePushAction(action)&&childRouters[action.routeName]!==undefined){var _childRouter=childRouters[action.routeName];var _route;invariant(action.type!==StackActions.PUSH||action.key==null,'StackRouter does not support key on the push action');var lastRouteIndex=state.routes.findIndex(function(r){if(action.key){return r.key===action.key;}else{return r.routeName===action.routeName;}});if(action.type!==StackActions.PUSH&&lastRouteIndex!==-1){if(state.index===lastRouteIndex&&!action.params){return null;}var routes=state.routes.slice(0,lastRouteIndex+1);if(action.params){var _route2=state.routes[lastRouteIndex];routes[lastRouteIndex]=_objectSpread(_objectSpread({},_route2),{},{params:_objectSpread(_objectSpread({},_route2.params),action.params)});}return _objectSpread(_objectSpread({},state),{},{isTransitioning:state.index!==lastRouteIndex?action.immediate!==true:state.isTransitioning,index:lastRouteIndex,routes:routes});}if(_childRouter){var _childAction=action.action||NavigationActions.init({params:action.params});_route=_objectSpread(_objectSpread({params:action.params},_childRouter.getStateForAction(_childAction)),{},{routeName:action.routeName,key:action.key||generateKey()});}else{_route={params:action.params,routeName:action.routeName,key:action.key||generateKey()};}return _objectSpread(_objectSpread({},StateUtils.push(state,_route)),{},{isTransitioning:action.immediate!==true});}else if(action.type===StackActions.PUSH&&childRouters[action.routeName]===undefined){return state;}if(behavesLikePushAction(action)){var childRouterNames=Object.keys(childRouters);for(var i=0;i<childRouterNames.length;i++){var childRouterName=childRouterNames[i];var _childRouter2=childRouters[childRouterName];if(_childRouter2){var initChildRoute=_childRouter2.getStateForAction(NavigationActions.init());var navigatedChildRoute=_childRouter2.getStateForAction(action,initChildRoute);var routeToPush=null;if(navigatedChildRoute===null){routeToPush=initChildRoute;}else if(navigatedChildRoute!==initChildRoute){routeToPush=navigatedChildRoute;}if(routeToPush){var _route3=_objectSpread(_objectSpread({},routeToPush),{},{routeName:childRouterName,key:action.key||generateKey()});return _objectSpread(_objectSpread({},StateUtils.push(state,_route3)),{},{isTransitioning:action.immediate!==true});}}}}if(action.type===StackActions.POP_TO_TOP){if(action.key&&state.key!==action.key){return state;}if(state.index>0){return _objectSpread(_objectSpread({},state),{},{isTransitioning:action.immediate!==true,index:0,routes:[state.routes[0]]});}return state;}if(action.type===StackActions.REPLACE){var routeIndex;if(action.key===undefined&&state.routes.length){routeIndex=state.routes.length-1;}else{routeIndex=state.routes.findIndex(function(r){return r.key===action.key;});}if(routeIndex!==-1){var _childRouter3=childRouters[action.routeName];var childState={};if(_childRouter3){var _childAction2=action.action||NavigationActions.init({params:action.params});childState=_childRouter3.getStateForAction(_childAction2);}var _routes=_toConsumableArray(state.routes);_routes[routeIndex]=_objectSpread(_objectSpread({params:action.params},childState),{},{routeName:action.routeName,key:action.newKey||generateKey()});return _objectSpread(_objectSpread({},state),{},{routes:_routes});}}if(action.type===StackActions.COMPLETE_TRANSITION&&(action.key==null||action.key===state.key)&&state.isTransitioning){return _objectSpread(_objectSpread({},state),{},{isTransitioning:false});}if(action.type===NavigationActions.SET_PARAMS){var key=action.key;var lastRoute=state.routes.find(function(route){return route.key===key;});if(lastRoute){var params=_objectSpread(_objectSpread({},lastRoute.params),action.params);var _routes2=_toConsumableArray(state.routes);_routes2[state.routes.indexOf(lastRoute)]=_objectSpread(_objectSpread({},lastRoute),{},{params:params});return _objectSpread(_objectSpread({},state),{},{routes:_routes2});}}if(action.type===StackActions.RESET){if(action.key!=null&&action.key!=state.key){return state;}var newStackActions=action.actions;return _objectSpread(_objectSpread({},state),{},{routes:newStackActions.map(function(newStackAction){var router=childRouters[newStackAction.routeName];var childState={};if(router){var _childAction3=newStackAction.action||NavigationActions.init({params:newStackAction.params});childState=router.getStateForAction(_childAction3);}return _objectSpread(_objectSpread({params:newStackAction.params},childState),{},{routeName:newStackAction.routeName,key:newStackAction.key||generateKey()});}),index:action.index});}if(action.type===NavigationActions.BACK||action.type===StackActions.POP){var _key=action.key,n=action.n,immediate=action.immediate;var backRouteIndex=state.index;if(action.type===StackActions.POP&&n!=null){backRouteIndex=Math.max(1,state.index-n+1);}else if(_key){var backRoute=state.routes.find(function(route){return route.key===_key;});backRouteIndex=state.routes.indexOf(backRoute);}if(backRouteIndex>0){return _objectSpread(_objectSpread({},state),{},{routes:state.routes.slice(0,backRouteIndex),index:backRouteIndex-1,isTransitioning:immediate!==true});}}var keyIndex=action.key?StateUtils.indexOf(state,action.key):-1;for(var _iterator2=_createForOfIteratorHelperLoose(state.routes.slice().reverse()),_step2;!(_step2=_iterator2()).done;){var _childRoute=_step2.value;if(_childRoute.key===activeChildRoute.key){continue;}if(keyIndex>=0&&_childRoute.key!==action.key){continue;}var _childRouter4=childRouters[_childRoute.routeName];if(_childRouter4){var _route4=_childRouter4.getStateForAction(action,_childRoute);if(_route4===null){return state;}else if(_route4&&_route4!==_childRoute){return StateUtils.replaceAt(state,_childRoute.key,_route4,action.type===NavigationActions.SET_PARAMS);}}}return state;},getPathAndParamsForState:function getPathAndParamsForState(state){var route=state.routes[state.index];return getPathAndParamsForRoute(route);},getActionForPathAndParams:function getActionForPathAndParams(path,params){return _getActionForPathAndParams(path,params);},getScreenOptions:createConfigGetter(routeConfigs,stackConfig.navigationOptions)};});","map":{"version":3,"sources":["E:/photofeed/node_modules/react-navigation/src/routers/StackRouter.js"],"names":["NavigationActions","StackActions","createConfigGetter","getScreenForRouteName","StateUtils","validateRouteConfigMap","invariant","generateKey","createPathParser","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","route","navStateKey","isResetToRootStack","RESET","key","routeConfigs","stackConfig","childRouters","routeNames","Object","keys","forEach","routeName","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","childRouter","undefined","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","navigate","initialRouteKey","paths","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","length","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","slice","reverse","childRoute","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","COMPLETE_TRANSITION","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","backRouteIndex","Math","max","backRoute","keyIndex","getPathAndParamsForState","path","getScreenOptions","navigationOptions"],"mappings":"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","sourcesContent":["import NavigationActions from '../NavigationActions';\nimport StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = (route, navStateKey) => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach(routeName => {\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (route.params || action.params || initialRouteParams) && {\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || (initialRouteKey || generateKey()),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig.paths);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: params => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle explicit push navigation action. This must happen after the\n      // focused child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex(r => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          const childAction =\n            action.action || NavigationActions.init({ params: action.params });\n          route = {\n            params: action.params,\n            // merge the child state in this order to allow params override\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          route = {\n            params: action.params,\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(r => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({ params: action.params });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: action.params,\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key != state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map(newStackAction => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({ params: newStackAction.params });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: newStackAction.params,\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate } = action;\n        let backRouteIndex = state.index;\n        if (action.type === StackActions.POP && n != null) {\n          // determine the index to go back *from*. In this case, n=1 means to go\n          // back from state.index, as if it were a normal \"BACK\" action\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (key) {\n          const backRoute = state.routes.find(route => route.key === key);\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return {\n            ...state,\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true,\n          };\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.navigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}