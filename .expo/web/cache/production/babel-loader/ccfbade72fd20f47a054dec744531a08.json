{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import invariant from\"../utils/invariant\";import getScreenForRouteName from\"./getScreenForRouteName\";import validateScreenOptions from\"./validateScreenOptions\";function applyConfig(configurer,navigationOptions,configProps){if(typeof configurer==='function'){return _objectSpread(_objectSpread({},navigationOptions),configurer(_objectSpread(_objectSpread({},configProps),{},{navigationOptions:navigationOptions})));}if(typeof configurer==='object'){return _objectSpread(_objectSpread({},navigationOptions),configurer);}return navigationOptions;}export default(function(routeConfigs,navigatorScreenConfig){return function(navigation,screenProps){var state=navigation.state,dispatch=navigation.dispatch;var route=state;invariant(route.routeName&&typeof route.routeName==='string','Cannot get config because the route does not have a routeName.');var Component=getScreenForRouteName(routeConfigs,route.routeName);var routeConfig=routeConfigs[route.routeName];var routeScreenConfig=routeConfig===Component?null:routeConfig.navigationOptions;var componentScreenConfig=Component.navigationOptions;var configOptions={navigation:navigation,screenProps:screenProps||{}};var outputConfig=applyConfig(navigatorScreenConfig,{},configOptions);outputConfig=applyConfig(componentScreenConfig,outputConfig,configOptions);outputConfig=applyConfig(routeScreenConfig,outputConfig,configOptions);validateScreenOptions(outputConfig,route);return outputConfig;};});","map":{"version":3,"sources":["E:/photofeed/node_modules/react-navigation/src/routers/createConfigGetter.js"],"names":["invariant","getScreenForRouteName","validateScreenOptions","applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","state","dispatch","route","routeName","Component","routeConfig","routeScreenConfig","componentScreenConfig","configOptions","outputConfig"],"mappings":"+1BAAA,MAAOA,CAAAA,SAAP,0BAEA,MAAOC,CAAAA,qBAAP,+BACA,MAAOC,CAAAA,qBAAP,+BAEA,QAASC,CAAAA,WAAT,CAAqBC,UAArB,CAAiCC,iBAAjC,CAAoDC,WAApD,CAAiE,CAC/D,GAAI,MAAOF,CAAAA,UAAP,GAAsB,UAA1B,CAAsC,CACpC,sCACKC,iBADL,EAEKD,UAAU,gCACRE,WADQ,MAEXD,iBAAiB,CAAjBA,iBAFW,GAFf,EAOD,CACD,GAAI,MAAOD,CAAAA,UAAP,GAAsB,QAA1B,CAAoC,CAClC,sCACKC,iBADL,EAEKD,UAFL,EAID,CACD,MAAOC,CAAAA,iBAAP,CACD,CAED,eAAe,SAACE,YAAD,CAAeC,qBAAf,QAAyC,UACtDC,UADsD,CAEtDC,WAFsD,CAGnD,IACKC,CAAAA,KADL,CACyBF,UADzB,CACKE,KADL,CACYC,QADZ,CACyBH,UADzB,CACYG,QADZ,CAEH,GAAMC,CAAAA,KAAK,CAAGF,KAAd,CAEAX,SAAS,CACPa,KAAK,CAACC,SAAN,EAAmB,MAAOD,CAAAA,KAAK,CAACC,SAAb,GAA2B,QADvC,CAEP,gEAFO,CAAT,CAKA,GAAMC,CAAAA,SAAS,CAAGd,qBAAqB,CAACM,YAAD,CAAeM,KAAK,CAACC,SAArB,CAAvC,CAEA,GAAME,CAAAA,WAAW,CAAGT,YAAY,CAACM,KAAK,CAACC,SAAP,CAAhC,CAEA,GAAMG,CAAAA,iBAAiB,CACrBD,WAAW,GAAKD,SAAhB,CAA4B,IAA5B,CAAmCC,WAAW,CAACX,iBADjD,CAEA,GAAMa,CAAAA,qBAAqB,CAAGH,SAAS,CAACV,iBAAxC,CAEA,GAAMc,CAAAA,aAAa,CAAG,CAAEV,UAAU,CAAVA,UAAF,CAAcC,WAAW,CAAEA,WAAW,EAAI,EAA1C,CAAtB,CAEA,GAAIU,CAAAA,YAAY,CAAGjB,WAAW,CAACK,qBAAD,CAAwB,EAAxB,CAA4BW,aAA5B,CAA9B,CACAC,YAAY,CAAGjB,WAAW,CACxBe,qBADwB,CAExBE,YAFwB,CAGxBD,aAHwB,CAA1B,CAKAC,YAAY,CAAGjB,WAAW,CAACc,iBAAD,CAAoBG,YAApB,CAAkCD,aAAlC,CAA1B,CAEAjB,qBAAqB,CAACkB,YAAD,CAAeP,KAAf,CAArB,CAEA,MAAOO,CAAAA,YAAP,CACD,CAjCc,EAAf","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps\n) => {\n  const { state, dispatch } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}