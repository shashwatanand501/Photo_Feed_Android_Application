{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import*as React from'react';import PropTypes from'prop-types';import TouchableNativeFeedback from\"react-native-web/dist/exports/TouchableNativeFeedback\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import Platform from\"react-native-web/dist/exports/Platform\";import View from\"react-native-web/dist/exports/View\";var LOLLIPOP=21;var TouchableItem=function(_React$Component){_inherits(TouchableItem,_React$Component);var _super=_createSuper(TouchableItem);function TouchableItem(){var _this;_classCallCheck(this,TouchableItem);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this._handlePress=function(){global.requestAnimationFrame(_this.props.onPress);};return _this;}_createClass(TouchableItem,[{key:\"render\",value:function render(){var _this$props=this.props,style=_this$props.style,pressOpacity=_this$props.pressOpacity,pressColor=_this$props.pressColor,borderless=_this$props.borderless,rest=_objectWithoutProperties(_this$props,[\"style\",\"pressOpacity\",\"pressColor\",\"borderless\"]);if(Platform.OS==='android'&&Platform.Version>=LOLLIPOP){return React.createElement(TouchableNativeFeedback,_extends({},rest,{onPress:this._handlePress,background:TouchableNativeFeedback.Ripple(pressColor,borderless)}),React.createElement(View,{style:style},React.Children.only(this.props.children)));}else{return React.createElement(TouchableOpacity,_extends({},rest,{onPress:this._handlePress,style:style,activeOpacity:pressOpacity}),this.props.children);}}}]);return TouchableItem;}(React.Component);TouchableItem.propTypes={onPress:PropTypes.func.isRequired,delayPressIn:PropTypes.number,borderless:PropTypes.bool,pressColor:PropTypes.string,pressOpacity:PropTypes.number,children:PropTypes.node.isRequired};TouchableItem.defaultProps={pressColor:'rgba(255, 255, 255, .4)'};export{TouchableItem as default};","map":{"version":3,"sources":["E:/photofeed/node_modules/react-native-tab-view/src/TouchableItem.js"],"names":["React","PropTypes","LOLLIPOP","TouchableItem","_handlePress","global","requestAnimationFrame","props","onPress","style","pressOpacity","pressColor","borderless","rest","Platform","OS","Version","TouchableNativeFeedback","Ripple","Children","only","children","Component","propTypes","func","isRequired","delayPressIn","number","bool","string","node","defaultProps"],"mappings":"0oCAEA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,C,0RASA,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,C,GAYqBC,CAAAA,a,sVAcnBC,Y,CAAe,UAAM,CACnBC,MAAM,CAACC,qBAAP,CAA6B,MAAKC,KAAL,CAAWC,OAAxC,EACD,C,gFAEQ,iBAC0D,KAAKD,KAD/D,CACCE,KADD,aACCA,KADD,CACQC,YADR,aACQA,YADR,CACsBC,UADtB,aACsBA,UADtB,CACkCC,UADlC,aACkCA,UADlC,CACiDC,IADjD,0FAGP,GAAIC,QAAQ,CAACC,EAAT,GAAgB,SAAhB,EAA6BD,QAAQ,CAACE,OAAT,EAAoBd,QAArD,CAA+D,CAC7D,MACE,qBAAC,uBAAD,aACMW,IADN,EAEE,OAAO,CAAE,KAAKT,YAFhB,CAGE,UAAU,CAAEa,uBAAuB,CAACC,MAAxB,CAA+BP,UAA/B,CAA2CC,UAA3C,CAHd,GAKE,oBAAC,IAAD,EAAM,KAAK,CAAEH,KAAb,EAAqBT,KAAK,CAACmB,QAAN,CAAeC,IAAf,CAAoB,KAAKb,KAAL,CAAWc,QAA/B,CAArB,CALF,CADF,CASD,CAVD,IAUO,CACL,MACE,qBAAC,gBAAD,aACMR,IADN,EAEE,OAAO,CAAE,KAAKT,YAFhB,CAGE,KAAK,CAAEK,KAHT,CAIE,aAAa,CAAEC,YAJjB,GAMG,KAAKH,KAAL,CAAWc,QANd,CADF,CAUD,CACF,C,2BA3CwCrB,KAAK,CAACsB,S,EAA5BnB,a,CACZoB,S,CAAY,CACjBf,OAAO,CAAEP,SAAS,CAACuB,IAAV,CAAeC,UADP,CAEjBC,YAAY,CAAEzB,SAAS,CAAC0B,MAFP,CAGjBf,UAAU,CAAEX,SAAS,CAAC2B,IAHL,CAIjBjB,UAAU,CAAEV,SAAS,CAAC4B,MAJL,CAKjBnB,YAAY,CAAET,SAAS,CAAC0B,MALP,CAMjBN,QAAQ,CAAEpB,SAAS,CAAC6B,IAAV,CAAeL,UANR,C,CADAtB,a,CAUZ4B,Y,CAAe,CACpBpB,UAAU,CAAE,yBADQ,C,QAVHR,a","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  Platform,\n  View,\n} from 'react-native';\nimport type { Style } from './TabViewTypeDefinitions';\n\nconst LOLLIPOP = 21;\n\ntype Props = {\n  onPress: Function,\n  delayPressIn?: number,\n  borderless?: boolean,\n  pressColor?: string,\n  pressOpacity?: number,\n  children?: React.Node,\n  style?: Style,\n};\n\nexport default class TouchableItem extends React.Component<Props> {\n  static propTypes = {\n    onPress: PropTypes.func.isRequired,\n    delayPressIn: PropTypes.number,\n    borderless: PropTypes.bool,\n    pressColor: PropTypes.string,\n    pressOpacity: PropTypes.number,\n    children: PropTypes.node.isRequired,\n  };\n\n  static defaultProps = {\n    pressColor: 'rgba(255, 255, 255, .4)',\n  };\n\n  _handlePress = () => {\n    global.requestAnimationFrame(this.props.onPress);\n  };\n\n  render() {\n    const { style, pressOpacity, pressColor, borderless, ...rest } = this.props;\n\n    if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          onPress={this._handlePress}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else {\n      return (\n        <TouchableOpacity\n          {...rest}\n          onPress={this._handlePress}\n          style={style}\n          activeOpacity={pressOpacity}\n        >\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}