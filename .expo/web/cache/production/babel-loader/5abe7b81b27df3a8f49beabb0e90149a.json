{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import invariant from\"../utils/invariant\";import getScreenForRouteName from\"./getScreenForRouteName\";import createConfigGetter from\"./createConfigGetter\";import NavigationActions from\"../NavigationActions\";import StackActions from\"./StackActions\";import validateRouteConfigMap from\"./validateRouteConfigMap\";import{createPathParser}from\"./pathUtils\";var defaultActionCreators=function defaultActionCreators(route,navStateKey){return{};};function childrenUpdateWithoutSwitchingIndex(actionType){return[NavigationActions.SET_PARAMS,StackActions.COMPLETE_TRANSITION].includes(actionType);}export default(function(routeConfigs){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};validateRouteConfigMap(routeConfigs);var order=config.order||Object.keys(routeConfigs);var getCustomActionCreators=config.getCustomActionCreators||defaultActionCreators;var initialRouteParams=config.initialRouteParams;var initialRouteName=config.initialRouteName||order[0];var backBehavior=config.backBehavior||'none';var shouldBackNavigateToInitialRoute=backBehavior==='initialRoute';var resetOnBlur=config.hasOwnProperty('resetOnBlur')?config.resetOnBlur:true;var initialRouteIndex=order.indexOf(initialRouteName);var childRouters={};order.forEach(function(routeName){var routeConfig=routeConfigs[routeName];childRouters[routeName]=null;var screen=getScreenForRouteName(routeConfigs,routeName);if(screen.router){childRouters[routeName]=screen.router;}});var _createPathParser=createPathParser(childRouters,routeConfigs,config.paths),getPathAndParamsForRoute=_createPathParser.getPathAndParamsForRoute,_getActionForPathAndParams=_createPathParser.getActionForPathAndParams;if(initialRouteIndex===-1){throw new Error(\"Invalid initialRouteName '\"+initialRouteName+\"'.\"+(\"Should be one of \"+order.map(function(n){return\"\\\"\"+n+\"\\\"\";}).join(', ')));}function resetChildRoute(routeName){var params=routeName===initialRouteName?initialRouteParams:undefined;var childRouter=childRouters[routeName];if(childRouter){var childAction=NavigationActions.init();return _objectSpread(_objectSpread({},childRouter.getStateForAction(childAction)),{},{key:routeName,routeName:routeName,params:params});}return{key:routeName,routeName:routeName,params:params};}function getNextState(prevState,possibleNextState){if(!prevState){return possibleNextState;}var nextState;if(prevState.index!==possibleNextState.index&&resetOnBlur){var prevRouteName=prevState.routes[prevState.index].routeName;var nextRoutes=_toConsumableArray(possibleNextState.routes);nextRoutes[prevState.index]=resetChildRoute(prevRouteName);return _objectSpread(_objectSpread({},possibleNextState),{},{routes:nextRoutes});}else{nextState=possibleNextState;}return nextState;}function getInitialState(){var routes=order.map(resetChildRoute);return{routes:routes,index:initialRouteIndex,isTransitioning:false};}return{childRouters:childRouters,getActionCreators:function getActionCreators(route,stateKey){return getCustomActionCreators(route,stateKey);},getStateForAction:function getStateForAction(action,inputState){var prevState=inputState?_objectSpread({},inputState):inputState;var state=inputState||getInitialState();var activeChildIndex=state.index;if(action.type===NavigationActions.INIT){var params=action.params;if(params){state.routes=state.routes.map(function(route){return _objectSpread(_objectSpread({},route),{},{params:_objectSpread(_objectSpread(_objectSpread({},route.params),params),route.routeName===initialRouteName?initialRouteParams:null)});});}}var activeChildLastState=state.routes[state.index];var activeChildRouter=childRouters[order[state.index]];if(activeChildRouter){var activeChildState=activeChildRouter.getStateForAction(action,activeChildLastState);if(!activeChildState&&inputState){return null;}if(activeChildState&&activeChildState!==activeChildLastState){var _routes=_toConsumableArray(state.routes);_routes[state.index]=activeChildState;return getNextState(prevState,_objectSpread(_objectSpread({},state),{},{routes:_routes}));}}var isBackEligible=action.key==null||action.key===activeChildLastState.key;if(action.type===NavigationActions.BACK){if(isBackEligible&&shouldBackNavigateToInitialRoute){activeChildIndex=initialRouteIndex;}else{return state;}}var didNavigate=false;if(action.type===NavigationActions.NAVIGATE){didNavigate=!!order.find(function(childId,i){if(childId===action.routeName){activeChildIndex=i;return true;}return false;});if(didNavigate){var childState=state.routes[activeChildIndex];var childRouter=childRouters[action.routeName];var newChildState;if(action.action){newChildState=childRouter?childRouter.getStateForAction(action.action,childState):null;}else if(!action.action&&action.params){newChildState=_objectSpread(_objectSpread({},childState),{},{params:_objectSpread(_objectSpread({},childState.params||{}),action.params)});}if(newChildState&&newChildState!==childState){var _routes2=_toConsumableArray(state.routes);_routes2[activeChildIndex]=newChildState;return getNextState(prevState,_objectSpread(_objectSpread({},state),{},{routes:_routes2,index:activeChildIndex}));}else if(!newChildState&&state.index===activeChildIndex&&prevState){return null;}}}if(action.type===NavigationActions.SET_PARAMS){var key=action.key;var lastRoute=state.routes.find(function(route){return route.key===key;});if(lastRoute){var _params=_objectSpread(_objectSpread({},lastRoute.params),action.params);var _routes3=_toConsumableArray(state.routes);_routes3[state.routes.indexOf(lastRoute)]=_objectSpread(_objectSpread({},lastRoute),{},{params:_params});return getNextState(prevState,_objectSpread(_objectSpread({},state),{},{routes:_routes3}));}}if(activeChildIndex!==state.index){return getNextState(prevState,_objectSpread(_objectSpread({},state),{},{index:activeChildIndex}));}else if(didNavigate&&!inputState){return state;}else if(didNavigate){return _objectSpread({},state);}var index=state.index;var routes=state.routes;order.find(function(childId,i){var childRouter=childRouters[childId];if(i===index){return false;}var childState=routes[i];if(childRouter){childState=childRouter.getStateForAction(action,childState);}if(!childState){index=i;return true;}if(childState!==routes[i]){routes=_toConsumableArray(routes);routes[i]=childState;index=i;return true;}return false;});if(childrenUpdateWithoutSwitchingIndex(action.type)){index=state.index;}if(index!==state.index||routes!==state.routes){return getNextState(prevState,_objectSpread(_objectSpread({},state),{},{index:index,routes:routes}));}return state;},getComponentForState:function getComponentForState(state){var routeName=state.routes[state.index].routeName;invariant(routeName,\"There is no route defined for index \"+state.index+\". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\");var childRouter=childRouters[routeName];if(childRouter){return childRouter.getComponentForState(state.routes[state.index]);}return getScreenForRouteName(routeConfigs,routeName);},getComponentForRouteName:function getComponentForRouteName(routeName){return getScreenForRouteName(routeConfigs,routeName);},getPathAndParamsForState:function getPathAndParamsForState(state){var route=state.routes[state.index];return getPathAndParamsForRoute(route);},getActionForPathAndParams:function getActionForPathAndParams(path,params){return _getActionForPathAndParams(path,params);},getScreenOptions:createConfigGetter(routeConfigs,config.navigationOptions)};});","map":{"version":3,"sources":["E:/photofeed/node_modules/react-navigation/src/routers/SwitchRouter.js"],"names":["invariant","getScreenForRouteName","createConfigGetter","NavigationActions","StackActions","validateRouteConfigMap","createPathParser","defaultActionCreators","route","navStateKey","childrenUpdateWithoutSwitchingIndex","actionType","SET_PARAMS","COMPLETE_TRANSITION","includes","routeConfigs","config","order","Object","keys","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","shouldBackNavigateToInitialRoute","resetOnBlur","hasOwnProperty","initialRouteIndex","indexOf","childRouters","forEach","routeName","routeConfig","screen","router","paths","getPathAndParamsForRoute","getActionForPathAndParams","Error","map","n","join","resetChildRoute","params","undefined","childRouter","childAction","init","getStateForAction","key","getNextState","prevState","possibleNextState","nextState","index","prevRouteName","routes","nextRoutes","getInitialState","isTransitioning","getActionCreators","stateKey","action","inputState","state","activeChildIndex","type","INIT","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","BACK","didNavigate","NAVIGATE","find","childId","i","childState","newChildState","lastRoute","getComponentForState","getComponentForRouteName","getPathAndParamsForState","path","getScreenOptions","navigationOptions"],"mappings":"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","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport NavigationActions from '../NavigationActions';\nimport StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = (route, navStateKey) => ({});\n\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [\n    NavigationActions.SET_PARAMS,\n    // Todo: make SwitchRouter not depend on StackActions..\n    StackActions.COMPLETE_TRANSITION,\n  ].includes(actionType);\n}\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  const childRouters = {};\n  order.forEach(routeName => {\n    const routeConfig = routeConfigs[routeName];\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config.paths);\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  function resetChildRoute(routeName) {\n    const params =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  function getNextState(prevState, possibleNextState) {\n    if (!prevState) {\n      return possibleNextState;\n    }\n\n    let nextState;\n    if (prevState.index !== possibleNextState.index && resetOnBlur) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n\n      return {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    } else {\n      nextState = possibleNextState;\n    }\n\n    return nextState;\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    return {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false,\n    };\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && shouldBackNavigateToInitialRoute) {\n          activeChildIndex = initialRouteIndex;\n        } else {\n          return state;\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState;\n\n          if (action.action) {\n            newChildState = childRouter\n              ? childRouter.getStateForAction(action.action, childState)\n              : null;\n          } else if (!action.action && action.params) {\n            newChildState = {\n              ...childState,\n              params: {\n                ...(childState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState && newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            return getNextState(prevState, {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            });\n          } else if (\n            !newChildState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      // Let other children handle it and switch to the first child that returns a new state\n      let index = state.index;\n      let routes = state.routes;\n      order.find((childId, i) => {\n        const childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        let childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = [...routes];\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n\n      // Nested routers can be updated after switching children with actions such as SET_PARAMS\n      // and COMPLETE_TRANSITION.\n      // NOTE: This may be problematic with custom routers because we whitelist the actions\n      // that can be handled by child routers without automatically changing index.\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(prevState, {\n          ...state,\n          index,\n          routes,\n        });\n      }\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.navigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}